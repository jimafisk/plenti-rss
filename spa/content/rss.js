/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	children,
	claim_element,
	claim_text,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	set_style,
	text
} from '../web_modules/svelte/internal/index.mjs';

function create_fragment(ctx) {
	let pre;
	let t;

	return {
		c() {
			pre = element("pre");
			t = text(/*rssFeed*/ ctx[0]);
			this.h();
		},
		l(nodes) {
			pre = claim_element(nodes, "PRE", { style: true });
			var pre_nodes = children(pre);
			t = claim_text(pre_nodes, /*rssFeed*/ ctx[0]);
			pre_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_style(pre, "word-wrap", "break-word");
			set_style(pre, "white-space", "pre-wrap");
		},
		m(target, anchor) {
			insert(target, pre, anchor);
			append(pre, t);
		},
		p(ctx, [dirty]) {
			if (dirty & /*rssFeed*/ 1) set_data(t, /*rssFeed*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(pre);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { allContent } = $$props;
	let allPosts = allContent.filter(content => content.type == "blog");
	let rssFeed = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><rss version=\"2.0\"><channel><title>My Site Blog</title><link>https://www.mysite.com/blog</link><description>Awesome blog posts for my site</description>";

	allPosts.forEach(post => {
		$$invalidate(0, rssFeed += "<item><title>" + post.fields.title + "</title>");
		$$invalidate(0, rssFeed += "<link>" + post.path + "</link>");
		$$invalidate(0, rssFeed += "<description>" + post.fields.body[0] + "</description>");
		$$invalidate(0, rssFeed += "</item>");
	});

	rssFeed += "</channel></rss>";

	$$self.$$set = $$props => {
		if ("allContent" in $$props) $$invalidate(1, allContent = $$props.allContent);
	};

	return [rssFeed, allContent];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { allContent: 1 });
	}
}

export default Component;