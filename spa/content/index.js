/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from '../web_modules/svelte/internal/index.mjs';

import Grid from '../components/grid.js';
import Uses from '../components/source.js';
import Pager from '../components/pager.js';

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let p;
	let t2;
	let a;
	let t3;
	let t4;
	let div;
	let h3;
	let t5;
	let t6;
	let grid;
	let t7;
	let br;
	let t8;
	let pager;
	let t9;
	let uses;
	let current;

	grid = new Grid({
			props: {
				items: /*allPosts*/ ctx[5],
				postRangeLow: /*postRangeLow*/ ctx[4],
				postRangeHigh: /*postRangeHigh*/ ctx[3]
			}
		});

	pager = new Pager({
			props: {
				currentPage: /*currentPage*/ ctx[2],
				totalPages: /*totalPages*/ ctx[6]
			}
		});

	uses = new Uses({ props: { content: /*content*/ ctx[1] } });

	return {
		c() {
			h1 = element("h1");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			p = element("p");
			t2 = text("Checkout our new ");
			a = element("a");
			t3 = text("RSS feed");
			t4 = space();
			div = element("div");
			h3 = element("h3");
			t5 = text("Recent blog posts:");
			t6 = space();
			create_component(grid.$$.fragment);
			t7 = space();
			br = element("br");
			t8 = space();
			create_component(pager.$$.fragment);
			t9 = space();
			create_component(uses.$$.fragment);
			this.h();
		},
		l(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, /*title*/ ctx[0]);
			h1_nodes.forEach(detach);
			t1 = claim_space(nodes);
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "Checkout our new ");
			a = claim_element(p_nodes, "A", { href: true });
			var a_nodes = children(a);
			t3 = claim_text(a_nodes, "RSS feed");
			a_nodes.forEach(detach);
			p_nodes.forEach(detach);
			t4 = claim_space(nodes);
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			h3 = claim_element(div_nodes, "H3", {});
			var h3_nodes = children(h3);
			t5 = claim_text(h3_nodes, "Recent blog posts:");
			h3_nodes.forEach(detach);
			t6 = claim_space(div_nodes);
			claim_component(grid.$$.fragment, div_nodes);
			t7 = claim_space(div_nodes);
			br = claim_element(div_nodes, "BR", {});
			div_nodes.forEach(detach);
			t8 = claim_space(nodes);
			claim_component(pager.$$.fragment, nodes);
			t9 = claim_space(nodes);
			claim_component(uses.$$.fragment, nodes);
			this.h();
		},
		h() {
			attr(a, "href", "rss");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, p, anchor);
			append(p, t2);
			append(p, a);
			append(a, t3);
			insert(target, t4, anchor);
			insert(target, div, anchor);
			append(div, h3);
			append(h3, t5);
			append(div, t6);
			mount_component(grid, div, null);
			append(div, t7);
			append(div, br);
			insert(target, t8, anchor);
			mount_component(pager, target, anchor);
			insert(target, t9, anchor);
			mount_component(uses, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);
			const grid_changes = {};
			if (dirty & /*postRangeLow*/ 16) grid_changes.postRangeLow = /*postRangeLow*/ ctx[4];
			if (dirty & /*postRangeHigh*/ 8) grid_changes.postRangeHigh = /*postRangeHigh*/ ctx[3];
			grid.$set(grid_changes);
			const pager_changes = {};
			if (dirty & /*currentPage*/ 4) pager_changes.currentPage = /*currentPage*/ ctx[2];
			pager.$set(pager_changes);
			const uses_changes = {};
			if (dirty & /*content*/ 2) uses_changes.content = /*content*/ ctx[1];
			uses.$set(uses_changes);
		},
		i(local) {
			if (current) return;
			transition_in(grid.$$.fragment, local);
			transition_in(pager.$$.fragment, local);
			transition_in(uses.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(grid.$$.fragment, local);
			transition_out(pager.$$.fragment, local);
			transition_out(uses.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(p);
			if (detaching) detach(t4);
			if (detaching) detach(div);
			destroy_component(grid);
			if (detaching) detach(t8);
			destroy_component(pager, detaching);
			if (detaching) detach(t9);
			destroy_component(uses, detaching);
		}
	};
}

let postsPerPage = 3;

function instance($$self, $$props, $$invalidate) {
	let currentPage;
	let postRangeHigh;
	let postRangeLow;

	let { title } = $$props,
		{ intro } = $$props,
		{ components } = $$props,
		{ content } = $$props,
		{ allContent } = $$props;

	let allPosts = allContent.filter(content => content.type == "blog");
	let totalPosts = allPosts.length;
	let totalPages = Math.ceil(totalPosts / postsPerPage);

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("intro" in $$props) $$invalidate(7, intro = $$props.intro);
		if ("components" in $$props) $$invalidate(8, components = $$props.components);
		if ("content" in $$props) $$invalidate(1, content = $$props.content);
		if ("allContent" in $$props) $$invalidate(9, allContent = $$props.allContent);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*content*/ 2) {
			$: $$invalidate(2, currentPage = content.pager);
		}

		if ($$self.$$.dirty & /*currentPage*/ 4) {
			$: $$invalidate(3, postRangeHigh = currentPage * postsPerPage);
		}

		if ($$self.$$.dirty & /*postRangeHigh*/ 8) {
			$: $$invalidate(4, postRangeLow = postRangeHigh - postsPerPage);
		}
	};

	return [
		title,
		content,
		currentPage,
		postRangeHigh,
		postRangeLow,
		allPosts,
		totalPages,
		intro,
		components,
		allContent
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			intro: 7,
			components: 8,
			content: 1,
			allContent: 9
		});
	}
}

export default Component;